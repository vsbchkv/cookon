@layer base {
  @font-face {
    font-family: Rubik;
    font-style: normal;
    font-weight: 100 900;
    font-display: swap;
    font-named-instance: 'Regular'; /* stylelint-disable-line property-no-unknown */
    src:
      url('../fonts/Rubik/Rubik-VariableFont_wght.ttf') format('ttf'),
      url('../fonts/Rubik/Rubik-VariableFont_wght.woff2') format('woff2');
  }

  html {
    font-size: var(--font-size-default, 16px);
  }

  body {
    display: flex;
    flex-direction: column;
    font-size: 1rem;
    font-family: var(--font-family, Inter, Avenir, Helvetica, Arial, sans-serif);
    font-weight: 400;
    line-height: 1.3;
    background-color: var(--bg-color);
    background-image: var(--background-body);

    & > div {
      height: inherit;
    }
  }

  a {
    color: inherit;

    /* text-decoration: none; */
    cursor: pointer;
  }

  img {
    height: auto;
  }

  svg {
    fill: none;
    stroke: none;
  }

  textarea {
    width: 100%;
    font-family: inherit;
    background-color: transparent;
    resize: none;
  }

  sub {
    vertical-align: super;
  }

  input,
  button {
    text-shadow: inherit;
    color: inherit;
  }

  ul[class] {
    margin: 0;
    padding: 0;
    list-style-type: none;
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    overflow: hidden;
    white-space: nowrap;
  }

  .glow {
    --glow-angle: 0;
    --glow-spread: 3; /* 20 */
    --glow-offset-x: 0;
    --glow-offset-y: 0; /* 20 */
    --unit: 1px;

    box-shadow:
      inset calc(var(--glow-offset-x) * var(--unit, 1%)) calc(var(--glow-offset-y) * var(--unit, 1%))
        calc(var(--glow-spread) * var(--unit, 1%))
        oklch(from var(--accent-color) var(--glow-l, l) var(--glow-c, c) var(--glow-h, h)),
      calc(var(--glow-offset-x) * var(--unit, 1%)) calc(var(--glow-offset-y) * var(--unit, 1%))
        calc(var(--glow-spread) * var(--unit, 1%))
        oklch(from var(--accent-color) var(--glow-l, l) var(--glow-c, c) var(--glow-h, h));
    transition:
      transform calc(var(--glow-duration, 0.35s) + 0s) ease-in,
      box-shadow calc(var(--glow-duration, 0.35s) + 0.5s) ease-out calc(var(--glow-duration) / 2);

    @media (orientation: portrait) {
      /* --unit: 1dvh; */
    }
  }
}
